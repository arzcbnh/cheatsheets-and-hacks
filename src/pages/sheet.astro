<!-- ---
import type { GetStaticPaths } from "astro";
import fs from "node:fs";
import path from "node:path";
import { getCollection } from "astro:content";
import { getSheetNames, readStylesheet } from "scripts";

import BaseLayout from "layouts/BaseLayout.astro";
import Accordion from "components/Accordion.astro";
import DynamicColumns from "components/DynamicColumns.astro";
import type { ContentEntryMap } from "astro:content";
import Category from "components/Category.astro";

// export function getStaticPaths() {
//     const styles = fs
//         .readdirSync("src/styles")
//         .map(stylesheet => {
//             const name = stylesheet.slice(0, -4); // Remove '.css' extension
//             const content = fs.readFileSync(path.join("src/styles", stylesheet), { encoding: "utf8" });
//             return { [name]: content };
//         })
//         .reduce((styles, sheet) => ({ ...styles, ...sheet }), {});

//     const paths = getCollections().map(async name => {
//         const entries = await getCollection(name).then(collection => {
//             type Entry = (typeof collection)[number];
//             const position = ({ id }: Entry) => Number(id.slice(0, id.indexOf("-")));
//             const sorted = collection.sort((a, b) => position(a) - position(b));

//             return sorted;
//         });

//         const css = styles[name] ?? styles.default;

//         return {
//             params: { sheet: name.toLowerCase() },
//             props: { name, entries, css },
//         };
//     });

//     return Promise.all(paths);
// }

export const getStaticPaths = (() => {
    return getSheetNames().map(name => ({
        params: { sheet: name.toLowerCase() },
        props: { name }
    }));
}) satisfies GetStaticPaths;


const { sheet: slug } = Astro.params;
const { name } = Astro.props;
const css = readStylesheet(slug);

---

<style is:inline set:html={css}></style>

<BaseLayout pageTitle={name}>
    <div class="sheet">
        {
            Object.entries(categories).map(([category, entries]) => <Category title={category} entries={entries} />)
        }
    </div>
</BaseLayout> -->
